

import { CLIPlugin } from './plugin.interface';
import { LMStudioClient } from '../lm-client';
import { join } from 'path';

// Fun√ß√£o para limpar a resposta do LLM, removendo ```
function cleanCodeResponse(text: string): string {
    const lines = text.split('\n');
    if (lines.length > 1 && lines[0].trim().startsWith('```')) {
        return lines.slice(1, -1).join('\n');
    }
    return text;
}

// A l√≥gica real do comando
async function modifyAction(client: LMStudioClient, args: any[]) {
    const [filePath, instruction] = args;
    if (!filePath || !instruction) {
        console.error('\n‚ùå Erro: O caminho do arquivo e a instru√ß√£o s√£o obrigat√≥rios.');
        return;
    }

    try {
        const resolvedPath = join(process.cwd(), filePath);
        const file = Bun.file(resolvedPath);
        
        if (!await file.exists()) {
            console.error(`\n‚ùå Erro: Arquivo n√£o encontrado em '${resolvedPath}'.`);
            return;
        }

        const content = await file.text();
        const backupPath = `${resolvedPath}.backup`;

        // Criar backup
        await Bun.write(backupPath, content);
        console.log(`\nüíæ Backup do arquivo original criado em: ${backupPath}`);

        const systemPrompt = 'Voc√™ √© um programador expert. Modifique o c√≥digo fornecido para atender √† instru√ß√£o, mantendo a funcionalidade e as boas pr√°ticas.';

        const message = [
            `Modifique o seguinte c√≥digo conforme a instru√ß√£o: "${instruction}"`,
            '',
            `C√≥digo atual no arquivo '${filePath}':`,
            '```',
            content,
            '```',
            '',
            'Forne√ßa APENAS o c√≥digo modificado, sem explica√ß√µes ou texto adicional.'
        ].join('\n');

        console.log(`\n‚úèÔ∏è  Modificando ${filePath}...`);
        let newContent = await client.sendMessage(message, systemPrompt);
        newContent = cleanCodeResponse(newContent);

        await Bun.write(resolvedPath, newContent);
        console.log(`\n‚úÖ Arquivo modificado com sucesso!`);

    } catch (error) {
        const message = error instanceof Error ? error.message : String(error);
        console.error(`\n‚ùå Erro na modifica√ß√£o:`, message);
    }
}

// O objeto do plugin que exportamos
const ModifyPlugin: CLIPlugin = {
    name: 'modify <file> <instruction>',
    description: 'Modifica um arquivo existente com base em uma instru√ß√£o.',
    action: modifyAction
};

export default ModifyPlugin;

